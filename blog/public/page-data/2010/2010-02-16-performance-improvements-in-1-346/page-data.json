{"componentChunkName":"component---src-templates-article-js","path":"/2010/2010-02-16-performance-improvements-in-1-346/","result":{"data":{"asciidoc":{"html":"<div class=\"paragraph\">\n<p>So <a href=\"https://n4.nabble.com/Restarting-hudson-every-day-memory-leaks-td1311161.html\">the latest thread</a> from <a href=\"https://www.linkedin.com/in/davidwoon\">David Woon</a> was assumed to be one of those ordinary trouble-shooting sessions, but thanks to Gustaf Lundh, it turned out to be a very interesting exercise.</p>\n</div>\n<div class=\"paragraph\">\n<p>What we discovered was that the profiler I was using (<a href=\"https://www.yourkit.com/\">Your Kit Profiler</a>), was basically eliminating all the weak/soft references from the picture entirely. If we are looking for leaks, this was the right thing, as those references will be cleared before VM chokes with <tt>OutOfMemoryError</tt>. But because of this elimination, I was completely blind to the wasteful memory usage in Jelly, which are only reachable via soft references.</p>\n</div>\n<div class=\"paragraph\">\n<p>So I used <a href=\"https://www.eclipse.org/mat/\">Eclipse Memory Analyzer</a> and YJP side by side to look into Jelly&#8217;s memory usage, and based on that insight, I was able to substantially improve the memory usage and speed of Jelly.</p>\n</div>\n<div class=\"paragraph\">\n<p>I monitor my production Hudson deployment with <a href=\"https://java.sun.com/performance/jvmstat/visualgc.html\">VisualGC</a>, and the result was quite noticeable. And I hope you&#8217;ll notice that the response from Hudson is also snappier.</p>\n</div>\n<div class=\"paragraph\">\n<p>All these changes are a part of the latest 1.346 release.</p>\n</div>\n<hr>\n<div class=\"paragraph\">\n<p><strong>Editor&#8217;s Note:</strong> Kohsuke Kawaguchi a senior engineer at Oracle (formerly Sun) and is the founder and author of the Hudson project. To learn more about Kohsuke, you can <a href=\"https://twitter.com/kohsukekawa\">follow him on Twitter</a> or subscribe to <a href=\"https://weblogs.java.net/blog/kohsuke/\">his blog</a>.</p>\n</div>","document":{"title":"Performance improvements in 1.346","main":"Performance improvements in 1.346"},"author":{"fullName":"---"}}},"pageContext":{"id":"9b161e0c-34d0-5087-a799-3fd1bafbf320"}},"staticQueryHashes":[],"slicesMap":{}}